// Code generated by MockGen. DO NOT EDIT.
// Source: common.go
//
// Generated by this command:
//
//	mockgen -source=common.go -destination=mocks/common.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/kampanosg/lazytest/pkg/models"
	tview "github.com/rivo/tview"
	gomock "go.uber.org/mock/gomock"
)

// MockRunner is a mock of Runner interface.
type MockRunner struct {
	ctrl     *gomock.Controller
	recorder *MockRunnerMockRecorder
}

// MockRunnerMockRecorder is the mock recorder for MockRunner.
type MockRunnerMockRecorder struct {
	mock *MockRunner
}

// NewMockRunner creates a new mock instance.
func NewMockRunner(ctrl *gomock.Controller) *MockRunner {
	mock := &MockRunner{ctrl: ctrl}
	mock.recorder = &MockRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRunner) EXPECT() *MockRunnerMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockRunner) Run(command string) *models.LazyTestResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", command)
	ret0, _ := ret[0].(*models.LazyTestResult)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockRunnerMockRecorder) Run(command any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockRunner)(nil).Run), command)
}

// MockApplication is a mock of Application interface.
type MockApplication struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationMockRecorder
}

// MockApplicationMockRecorder is the mock recorder for MockApplication.
type MockApplicationMockRecorder struct {
	mock *MockApplication
}

// NewMockApplication creates a new mock instance.
func NewMockApplication(ctrl *gomock.Controller) *MockApplication {
	mock := &MockApplication{ctrl: ctrl}
	mock.recorder = &MockApplicationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplication) EXPECT() *MockApplicationMockRecorder {
	return m.recorder
}

// SetFocus mocks base method.
func (m *MockApplication) SetFocus(p tview.Primitive) *tview.Application {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFocus", p)
	ret0, _ := ret[0].(*tview.Application)
	return ret0
}

// SetFocus indicates an expected call of SetFocus.
func (mr *MockApplicationMockRecorder) SetFocus(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFocus", reflect.TypeOf((*MockApplication)(nil).SetFocus), p)
}

// SetRoot mocks base method.
func (m *MockApplication) SetRoot(root tview.Primitive, fullscreen bool) *tview.Application {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRoot", root, fullscreen)
	ret0, _ := ret[0].(*tview.Application)
	return ret0
}

// SetRoot indicates an expected call of SetRoot.
func (mr *MockApplicationMockRecorder) SetRoot(root, fullscreen any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRoot", reflect.TypeOf((*MockApplication)(nil).SetRoot), root, fullscreen)
}
